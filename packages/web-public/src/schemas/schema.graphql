# source: http://localhost:5000/graphql
# timestamp: Mon Apr 13 2020 13:56:28 GMT+0200 (South Africa Standard Time)

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

interface PointInTimeInterface {
  createdAt: DateTime!
  updatedAt: DateTime
  state: PointInTimeStateEnum!
}

enum PointInTimeStateEnum {
  ACTIVE
  INACTIVE
}

type Product implements PointInTimeInterface {
  """The ID of an object"""
  id: ID!
  detail: ProductDetail!
  currentAvailability: ProductAvailability!
  availability: [ProductAvailability]
  createdAt: DateTime!
  updatedAt: DateTime
  state: PointInTimeStateEnum!
}

type ProductAvailability implements PointInTimeInterface {
  """The ID of an object"""
  id: ID!
  availability: ProductAvailabilityEnum!
  createdAt: DateTime!
  updatedAt: DateTime
  state: PointInTimeStateEnum!
}

enum ProductAvailabilityEnum {
  SOLD
  AVAILABLE
}

type ProductCategory implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  imageUri: String!
  products: [Product!]!
}

type ProductDetail implements PointInTimeInterface {
  """The ID of an object"""
  id: ID!
  category: String!
  price: Int!
  description: String
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime
  state: PointInTimeStateEnum!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Viewer!
}

type Subscription {
  onNewUserMessage: UserMessageUpdate!
}

type User {
  """The ID of an object"""
  id: ID!
  username: String!
  profile: UserProfile
  userProducts: [UserProduct]
}

type UserMessage implements Node {
  """The ID of an object"""
  id: ID!
  message: String!
  read: Boolean!
  deleted: Boolean!
  createdAt: DateTime!
}

type UserMessageUpdate {
  message: UserMessage!
  messagesCount: ViewerMessageCount!
}

type UserProduct {
  """The ID of an object"""
  id: ID!
  product: Product!
}

type UserProfile {
  profileName: String!
  email: String!
  unitNumber: Int
  cellphone: String
}

type Viewer {
  user: User
  messages(after: String, first: Int, read: Boolean): ViewerMessagesConnection
  products: [Product!]
  productsByCategory(linkedToUser: Boolean): [ProductCategory!]
}

type ViewerMessageCount implements Node {
  """The ID of an object"""
  id: ID!
  unread: Int!
  deleted: Boolean!
}

"""A connection to a list of items."""
type ViewerMessagesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ViewerMessagesEdge]
  total: Int!
}

"""An edge in a connection."""
type ViewerMessagesEdge {
  """The item at the end of the edge"""
  node: UserMessage

  """A cursor for use in pagination"""
  cursor: String!
}
