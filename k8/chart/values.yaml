web-public:
  image:
    repository: registry.gitlab.com/stackworx.io/angloamerican/self-service-portal/web-public
    tag: master
    pullPolicy: IfNotPresent
  imageCredentials:
    registry: registry.gitlab.com
  ingress:
    enabled: true
    hosts:
      - selfservice.angloamerican.stackworx.dev
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      # Traefik 2 options
      traefik.ingress.kubernetes.io/router.entrypoints: http,https
  env:
    APP_SERVER_URI: "https://api.selfservice.angloamerican.stackworx.dev"
    APP_STAGE: "development"
    APP_DIRECTLINE_TOKEN_ENDPOINT: "https://bot.angloamerican.stackworx.dev/token-generate"
    APP_DIRECTLINE_ENDPOINT: "https://directline.angloamerican.stackworx.dev/v3/directline"
  secrets:
    - name: APP_APPLICATION_ID
      ref:
        name: azure-app-registration
        key: client-id
  probes:
    enabled: true
    liveness:
      timeoutSeconds: 10
    readiness:
      timeoutSeconds: 10
  nodeSelector:
    type: apps

web-server:
  image:
    repository: registry.gitlab.com/stackworx.io/angloamerican/self-service-portal/server
    tag: master
    pullPolicy: IfNotPresent
  imageCredentials:
    registry: registry.gitlab.com
  ingress:
    enabled: true
    hosts:
      - api.selfservice.angloamerican.stackworx.dev
    annotations:
      kubernetes.io/ingress.class: traefik
      # Only listen on https
      traefik.ingress.kubernetes.io/frontend-entry-points: https
      # Traefik 2 options
      traefik.ingress.kubernetes.io/router.entrypoints: http,https
  debugService:
    enabled: true
  migration:
    enabled: true
    args: ["migrate"]
    command:
  env:
    APP_STAGE: "development"
    MSSQL_HOST: "anglo-self-service-mssql"
    MSSQL_DATABASE: "master"
    MSSQL_PASSWORD: "Strong_!_Password"
    REDIS_HOST: "anglo-self-service-redis-master"
    PORT: "80"
    DEBUG_PORT: "8080"
  secrets:
    - name: AZURE_APP_CLIENT_ID
      ref:
        name: azure-app-registration
        key: client-id
    - name: AZURE_APP_CLIENT_SECRET
      ref:
        name: azure-app-registration
        key: client-secret
    - name: AZURE_TENANT_ID
      ref:
        name: azure-app-registration
        key: tenant-id
    - name: AZURE_BOT_SECRET
      ref:
        name: azure-bot
        key: secret
  probes:
    enabled: true
    liveness:
      timeoutSeconds: 10
      port: debug
    readiness:
      timeoutSeconds: 10
      port: debug
  nodeSelector:
    type: apps

mssql:
  enabled: true
  acceptEula:
    value: "y"
  # Override sapassword in templates/secret.yaml
  sapassword: "Strong_!_Password"
  # existingSecret: ""
  # existingSecretKey: sapassword
  image:
    repository: microsoft/mssql-server-linux
    tag: 2017-CU5
    pullPolicy: IfNotPresent

  persistence:
    enabled: true
    storageClass: ""
    dataAccessMode: ReadWriteOnce
    dataSize: 1Gi
    transactionLogAccessMode: ReadWriteOnce
    transactionLogSize: 1Gi
    backupAccessMode: ReadWriteOnce
    backupSize: 1Gi
    masterAccessMode: ReadWriteOnce
    masterSize: 1Gi
  livenessprobe:
    initialDelaySeconds: 15
    periodSeconds: 20
  readinessprobe:
    initialDelaySeconds: 5
    periodSeconds: 10
  resources:
    limits:
      #  cpu: 100m
      memory: 2Gi
    # requests:
    #  cpu: 100m
    #  memory: 2Gi
  nodeSelector:
    type: apps
    # kubernetes.io/hostname: minikube

redis:
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 5.0.5-debian-9-r181

  cluster:
    enabled: false
    slaveCount: 1

  rbac:
    create: true

  usePassword: false

  volumePermissions:
    enabled: true

  master:
    persistence:
      enabled: true
      # storageClass: "-"
      accessModes:
        - ReadWriteOnce
      size: 2Gi
    nodeSelector:
      type: apps

  metrics:
    enabled: true

    nodeSelector:
      type: apps
